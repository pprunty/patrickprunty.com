{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@shikijs+compat@2.5.0/node_modules/@shikijs/compat/dist/index.mjs", "../../../node_modules/.pnpm/@shikijs+types@2.5.0/node_modules/@shikijs/types/dist/index.mjs", "../../../node_modules/.pnpm/@shikijs+transformers@2.5.0/node_modules/@shikijs/transformers/dist/index.mjs", "../../../contentlayer.config.ts", "../../../config/app.config.ts"],
  "sourcesContent": ["import fs from 'node:fs';\nimport fsp from 'node:fs/promises';\nimport { transformerCompactLineOptions } from '@shikijs/transformers';\nimport { bundledLanguages, bundledThemes, warnDeprecated, createHighlighter, normalizeTheme, tokenizeAnsiWithTheme } from 'shiki';\nexport { normalizeTheme, normalizeTheme as toShikiTheme } from 'shiki';\nimport { ShikiError } from '@shikijs/core';\n\nclass ShikiCompatError extends ShikiError {\n  constructor(message) {\n    super(message);\n    this.name = \"ShikiCompatError\";\n  }\n}\n\nconst _warned = /* @__PURE__ */ new Set();\nfunction warnOnce(message) {\n  if (!_warned.has(message)) {\n    console.warn(`[shiki-compat]: ${message}`);\n    _warned.add(message);\n  }\n}\nfunction stubFunction(name) {\n  return () => {\n    warnOnce(`\\`${name}\\` is a stub function in \\`shiki-compat\\` and does nothing.`);\n  };\n}\nconst setCDN = stubFunction(\"setCDN\");\nconst setOnigasmWASM = stubFunction(\"setOnigasmWASM\");\nconst setWasm = stubFunction(\"setWasm\");\nconst setColorReplacements = stubFunction(\"setColorReplacements\");\n\nconst BUNDLED_LANGUAGES = bundledLanguages;\nconst BUNDLED_THEMES = bundledThemes;\nasync function getHighlighter(options = {}) {\n  warnDeprecated(`@shikijs/compat is deprecated and will be removed in v3, please migrate to the main shiki package`);\n  const themes = options.themes || [];\n  const langs = options.langs || [];\n  if (options.theme)\n    themes.unshift(options.theme);\n  if (!themes.length)\n    themes.push(\"nord\");\n  if (!langs.length)\n    langs.push(...Object.keys(bundledLanguages));\n  const shiki = await createHighlighter({\n    ...options,\n    themes,\n    langs\n  });\n  const defaultTheme = shiki.getLoadedThemes()[0];\n  function codeToTokensBase(code, lang, theme, options2) {\n    const tokens = shiki.codeToTokensBase(code, {\n      includeExplanation: true,\n      lang,\n      theme: theme || defaultTheme,\n      ...options2\n    });\n    tokens.forEach((line) => {\n      line.forEach((token) => {\n        token.explanation ||= [];\n        delete token.offset;\n      });\n    });\n    return tokens;\n  }\n  function codeToHtml(code, arg1, arg2, options2) {\n    const options3 = (typeof arg1 === \"string\" ? options2 : arg1) || {};\n    if (typeof arg1 === \"string\")\n      options3.lang ||= arg1;\n    if (!(\"themes\" in options3)) {\n      options3.theme = \"theme\" in options3 ? options3.theme || defaultTheme : arg2 || defaultTheme;\n    }\n    if (options3.lineOptions) {\n      options3.transformers ||= [];\n      options3.transformers.push(transformerCompactLineOptions(options3.lineOptions));\n    }\n    return shiki.codeToHtml(code, options3);\n  }\n  function ansiToThemedTokens(ansi, options2 = {}) {\n    const theme = shiki.getTheme(options2.theme || shiki.getLoadedThemes()[0]);\n    return tokenizeAnsiWithTheme(theme, ansi);\n  }\n  return {\n    ...shiki,\n    ansiToThemedTokens,\n    codeToTokensBase,\n    codeToThemedTokens: codeToTokensBase,\n    codeToHtml,\n    ansiToHtml(code, options2) {\n      return shiki.codeToHtml(code, {\n        lang: \"ansi\",\n        ...options2,\n        theme: options2?.theme || defaultTheme\n      });\n    },\n    getBackgroundColor(theme) {\n      return shiki.getTheme(theme).bg;\n    },\n    getForegroundColor(theme) {\n      return shiki.getTheme(theme).fg;\n    },\n    /**\n     * @deprecated Not supported by Shiki\n     */\n    setColorReplacements(..._args) {\n      throw new ShikiCompatError(\"`setColorReplacements` is not supported by @shikijs/compat\");\n    }\n  };\n}\nasync function loadTheme(theme) {\n  if (typeof theme === \"string\") {\n    if (bundledThemes[theme] != null)\n      return normalizeTheme(await bundledThemes[theme]().then((r) => r.default));\n    if (fs.existsSync(theme) && theme.endsWith(\".json\"))\n      return normalizeTheme(JSON.parse(await fsp.readFile(theme, \"utf-8\")));\n    throw new ShikiCompatError(`Unknown theme: ${theme}`);\n  } else {\n    return normalizeTheme(await normalizeGetter(theme));\n  }\n}\nasync function normalizeGetter(p) {\n  return Promise.resolve(typeof p === \"function\" ? p() : p).then((r) => r.default || r);\n}\n\nexport { BUNDLED_LANGUAGES, BUNDLED_THEMES, ShikiCompatError, getHighlighter as default, getHighlighter, loadTheme, setCDN, setColorReplacements, setOnigasmWASM, setWasm };\n", "class ShikiError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"ShikiError\";\n  }\n}\n\nexport { ShikiError };\n", "import { warnDeprecated } from '@shikijs/core';\n\nconst matchers = [\n  [/^(<!--)(.+)(-->)$/, false],\n  [/^(\\/\\*)(.+)(\\*\\/)$/, false],\n  [/^(\\/\\/|[\"'#]|;{1,2}|%{1,2}|--)(.*)$/, true],\n  /**\n   * for multi-line comments like this\n   */\n  [/^(\\*)(.+)$/, true]\n];\nfunction parseComments(lines, jsx, matchAlgorithm) {\n  const out = [];\n  for (const line of lines) {\n    if (matchAlgorithm === \"v3\") {\n      const splittedElements = line.children.flatMap((element, idx) => {\n        if (element.type !== \"element\")\n          return element;\n        const token = element.children[0];\n        if (token.type !== \"text\")\n          return element;\n        const isLast = idx === line.children.length - 1;\n        const isComment = matchToken(token.value, isLast);\n        if (!isComment)\n          return element;\n        const rawSplits = token.value.split(/(\\s+\\/\\/)/);\n        if (rawSplits.length <= 1)\n          return element;\n        let splits = [rawSplits[0]];\n        for (let i = 1; i < rawSplits.length; i += 2) {\n          splits.push(rawSplits[i] + (rawSplits[i + 1] || \"\"));\n        }\n        splits = splits.filter(Boolean);\n        if (splits.length <= 1)\n          return element;\n        return splits.map((split) => {\n          return {\n            ...element,\n            children: [\n              {\n                type: \"text\",\n                value: split\n              }\n            ]\n          };\n        });\n      });\n      if (splittedElements.length !== line.children.length)\n        line.children = splittedElements;\n    }\n    const elements = line.children;\n    let start = elements.length - 1;\n    if (matchAlgorithm === \"v1\")\n      start = 0;\n    else if (jsx)\n      start = elements.length - 2;\n    for (let i = Math.max(start, 0); i < elements.length; i++) {\n      const token = elements[i];\n      if (token.type !== \"element\")\n        continue;\n      const head = token.children.at(0);\n      if (head?.type !== \"text\")\n        continue;\n      const isLast = i === elements.length - 1;\n      const match = matchToken(head.value, isLast);\n      if (!match)\n        continue;\n      if (jsx && !isLast && i !== 0) {\n        const isJsxStyle = isValue(elements[i - 1], \"{\") && isValue(elements[i + 1], \"}\");\n        out.push({\n          info: match,\n          line,\n          token,\n          isLineCommentOnly: elements.length === 3 && token.children.length === 1,\n          isJsxStyle\n        });\n      } else {\n        out.push({\n          info: match,\n          line,\n          token,\n          isLineCommentOnly: elements.length === 1 && token.children.length === 1,\n          isJsxStyle: false\n        });\n      }\n    }\n  }\n  return out;\n}\nfunction isValue(element, value) {\n  if (element.type !== \"element\")\n    return false;\n  const text = element.children[0];\n  if (text.type !== \"text\")\n    return false;\n  return text.value.trim() === value;\n}\nfunction matchToken(text, isLast) {\n  let trimmed = text.trimStart();\n  const spaceFront = text.length - trimmed.length;\n  trimmed = trimmed.trimEnd();\n  const spaceEnd = text.length - trimmed.length - spaceFront;\n  for (const [matcher, endOfLine] of matchers) {\n    if (endOfLine && !isLast)\n      continue;\n    const result = matcher.exec(trimmed);\n    if (!result)\n      continue;\n    return [\n      \" \".repeat(spaceFront) + result[1],\n      result[2],\n      result[3] ? result[3] + \" \".repeat(spaceEnd) : void 0\n    ];\n  }\n}\nfunction v1ClearEndCommentPrefix(text) {\n  const match = text.match(/(?:\\/\\/|[\"'#]|;{1,2}|%{1,2}|--)(\\s*)$/);\n  if (match && match[1].trim().length === 0) {\n    return text.slice(0, match.index);\n  }\n  return text;\n}\n\nfunction createCommentNotationTransformer(name, regex, onMatch, matchAlgorithm) {\n  if (matchAlgorithm == null) {\n    matchAlgorithm = \"v1\";\n    warnDeprecated('The default `matchAlgorithm: \"v1\"` is deprecated and will be removed in the future. Please explicitly set `matchAlgorithm: \"v3\"` in the transformer options.', 3);\n  }\n  return {\n    name,\n    code(code) {\n      const lines = code.children.filter((i) => i.type === \"element\");\n      const linesToRemove = [];\n      code.data ??= {};\n      const data = code.data;\n      data._shiki_notation ??= parseComments(lines, [\"jsx\", \"tsx\"].includes(this.options.lang), matchAlgorithm);\n      const parsed = data._shiki_notation;\n      for (const comment of parsed) {\n        if (comment.info[1].length === 0)\n          continue;\n        let lineIdx = lines.indexOf(comment.line);\n        if (comment.isLineCommentOnly && matchAlgorithm !== \"v1\")\n          lineIdx++;\n        let replaced = false;\n        comment.info[1] = comment.info[1].replace(regex, (...match) => {\n          if (onMatch.call(this, match, comment.line, comment.token, lines, lineIdx)) {\n            replaced = true;\n            return \"\";\n          }\n          return match[0];\n        });\n        if (!replaced)\n          continue;\n        if (matchAlgorithm === \"v1\")\n          comment.info[1] = v1ClearEndCommentPrefix(comment.info[1]);\n        const isEmpty = comment.info[1].trim().length === 0;\n        if (isEmpty)\n          comment.info[1] = \"\";\n        if (isEmpty && comment.isLineCommentOnly) {\n          linesToRemove.push(comment.line);\n        } else if (isEmpty && comment.isJsxStyle) {\n          comment.line.children.splice(comment.line.children.indexOf(comment.token) - 1, 3);\n        } else if (isEmpty) {\n          comment.line.children.splice(comment.line.children.indexOf(comment.token), 1);\n        } else {\n          const head = comment.token.children[0];\n          if (head.type === \"text\") {\n            head.value = comment.info.join(\"\");\n          }\n        }\n      }\n      for (const line of linesToRemove) {\n        const index = code.children.indexOf(line);\n        const nextLine = code.children[index + 1];\n        let removeLength = 1;\n        if (nextLine?.type === \"text\" && nextLine?.value === \"\\n\")\n          removeLength = 2;\n        code.children.splice(index, removeLength);\n      }\n    }\n  };\n}\n\nfunction transformerCompactLineOptions(lineOptions = []) {\n  return {\n    name: \"@shikijs/transformers:compact-line-options\",\n    line(node, line) {\n      const lineOption = lineOptions.find((o) => o.line === line);\n      if (lineOption?.classes)\n        this.addClassToHast(node, lineOption.classes);\n      return node;\n    }\n  };\n}\n\nfunction parseMetaHighlightString(meta) {\n  if (!meta)\n    return null;\n  const match = meta.match(/\\{([\\d,-]+)\\}/);\n  if (!match)\n    return null;\n  const lines = match[1].split(\",\").flatMap((v) => {\n    const num = v.split(\"-\").map((v2) => Number.parseInt(v2, 10));\n    if (num.length === 1)\n      return [num[0]];\n    return Array.from({ length: num[1] - num[0] + 1 }, (_, i) => i + num[0]);\n  });\n  return lines;\n}\nconst symbol = Symbol(\"highlighted-lines\");\nfunction transformerMetaHighlight(options = {}) {\n  const {\n    className = \"highlighted\"\n  } = options;\n  return {\n    name: \"@shikijs/transformers:meta-highlight\",\n    line(node, line) {\n      if (!this.options.meta?.__raw) {\n        return;\n      }\n      const meta = this.meta;\n      meta[symbol] ??= parseMetaHighlightString(this.options.meta.__raw);\n      const lines = meta[symbol] ?? [];\n      if (lines.includes(line))\n        this.addClassToHast(node, className);\n      return node;\n    }\n  };\n}\n\nfunction parseMetaHighlightWords(meta) {\n  if (!meta)\n    return [];\n  const match = Array.from(meta.matchAll(/\\/((?:\\\\.|[^/])+)\\//g));\n  return match.map((v) => v[1].replace(/\\\\(.)/g, \"$1\"));\n}\nfunction transformerMetaWordHighlight(options = {}) {\n  const {\n    className = \"highlighted-word\"\n  } = options;\n  return {\n    name: \"@shikijs/transformers:meta-word-highlight\",\n    preprocess(code, options2) {\n      if (!this.options.meta?.__raw)\n        return;\n      const words = parseMetaHighlightWords(this.options.meta.__raw);\n      options2.decorations ||= [];\n      for (const word of words) {\n        const indexes = findAllSubstringIndexes(code, word);\n        for (const index of indexes) {\n          options2.decorations.push({\n            start: index,\n            end: index + word.length,\n            properties: {\n              class: className\n            }\n          });\n        }\n      }\n    }\n  };\n}\nfunction findAllSubstringIndexes(str, substr) {\n  const indexes = [];\n  let cursor = 0;\n  while (true) {\n    const index = str.indexOf(substr, cursor);\n    if (index === -1 || index >= str.length)\n      break;\n    if (index < cursor)\n      break;\n    indexes.push(index);\n    cursor = index + substr.length;\n  }\n  return indexes;\n}\n\nfunction escapeRegExp(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction transformerNotationMap(options = {}, name = \"@shikijs/transformers:notation-map\") {\n  const {\n    classMap = {},\n    classActivePre = void 0\n  } = options;\n  return createCommentNotationTransformer(\n    name,\n    new RegExp(`\\\\s*\\\\[!code (${Object.keys(classMap).map(escapeRegExp).join(\"|\")})(:\\\\d+)?\\\\]`),\n    function([_, match, range = \":1\"], _line, _comment, lines, index) {\n      const lineNum = Number.parseInt(range.slice(1), 10);\n      for (let i = index; i < Math.min(index + lineNum, lines.length); i++) {\n        this.addClassToHast(lines[i], classMap[match]);\n      }\n      if (classActivePre)\n        this.addClassToHast(this.pre, classActivePre);\n      return true;\n    },\n    options.matchAlgorithm\n  );\n}\n\nfunction transformerNotationDiff(options = {}) {\n  const {\n    classLineAdd = \"diff add\",\n    classLineRemove = \"diff remove\",\n    classActivePre = \"has-diff\"\n  } = options;\n  return transformerNotationMap(\n    {\n      classMap: {\n        \"++\": classLineAdd,\n        \"--\": classLineRemove\n      },\n      classActivePre,\n      matchAlgorithm: options.matchAlgorithm\n    },\n    \"@shikijs/transformers:notation-diff\"\n  );\n}\n\nfunction transformerNotationErrorLevel(options = {}) {\n  const {\n    classMap = {\n      error: [\"highlighted\", \"error\"],\n      warning: [\"highlighted\", \"warning\"]\n    },\n    classActivePre = \"has-highlighted\"\n  } = options;\n  return transformerNotationMap(\n    {\n      classMap,\n      classActivePre,\n      matchAlgorithm: options.matchAlgorithm\n    },\n    \"@shikijs/transformers:notation-error-level\"\n  );\n}\n\nfunction transformerNotationFocus(options = {}) {\n  const {\n    classActiveLine = \"focused\",\n    classActivePre = \"has-focused\"\n  } = options;\n  return transformerNotationMap(\n    {\n      classMap: {\n        focus: classActiveLine\n      },\n      classActivePre,\n      matchAlgorithm: options.matchAlgorithm\n    },\n    \"@shikijs/transformers:notation-focus\"\n  );\n}\n\nfunction transformerNotationHighlight(options = {}) {\n  const {\n    classActiveLine = \"highlighted\",\n    classActivePre = \"has-highlighted\"\n  } = options;\n  return transformerNotationMap(\n    {\n      classMap: {\n        highlight: classActiveLine,\n        hl: classActiveLine\n      },\n      classActivePre,\n      matchAlgorithm: options.matchAlgorithm\n    },\n    \"@shikijs/transformers:notation-highlight\"\n  );\n}\n\nfunction highlightWordInLine(line, ignoredElement, word, className) {\n  const content = getTextContent(line);\n  let index = content.indexOf(word);\n  while (index !== -1) {\n    highlightRange.call(this, line.children, ignoredElement, index, word.length, className);\n    index = content.indexOf(word, index + 1);\n  }\n}\nfunction getTextContent(element) {\n  if (element.type === \"text\")\n    return element.value;\n  if (element.type === \"element\" && element.tagName === \"span\")\n    return element.children.map(getTextContent).join(\"\");\n  return \"\";\n}\nfunction highlightRange(elements, ignoredElement, index, len, className) {\n  let currentIdx = 0;\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    if (element.type !== \"element\" || element.tagName !== \"span\" || element === ignoredElement)\n      continue;\n    const textNode = element.children[0];\n    if (textNode.type !== \"text\")\n      continue;\n    if (hasOverlap([currentIdx, currentIdx + textNode.value.length - 1], [index, index + len])) {\n      const start = Math.max(0, index - currentIdx);\n      const length = len - Math.max(0, currentIdx - index);\n      if (length === 0)\n        continue;\n      const separated = separateToken(element, textNode, start, length);\n      this.addClassToHast(separated[1], className);\n      const output = separated.filter(Boolean);\n      elements.splice(i, 1, ...output);\n      i += output.length - 1;\n    }\n    currentIdx += textNode.value.length;\n  }\n}\nfunction hasOverlap(range1, range2) {\n  return range1[0] <= range2[1] && range1[1] >= range2[0];\n}\nfunction separateToken(span, textNode, index, len) {\n  const text = textNode.value;\n  const createNode = (value) => inheritElement(span, {\n    children: [\n      {\n        type: \"text\",\n        value\n      }\n    ]\n  });\n  return [\n    index > 0 ? createNode(text.slice(0, index)) : void 0,\n    createNode(text.slice(index, index + len)),\n    index + len < text.length ? createNode(text.slice(index + len)) : void 0\n  ];\n}\nfunction inheritElement(original, overrides) {\n  return {\n    ...original,\n    properties: {\n      ...original.properties\n    },\n    ...overrides\n  };\n}\n\nfunction transformerNotationWordHighlight(options = {}) {\n  const {\n    classActiveWord = \"highlighted-word\",\n    classActivePre = void 0\n  } = options;\n  return createCommentNotationTransformer(\n    \"@shikijs/transformers:notation-highlight-word\",\n    /\\s*\\[!code word:((?:\\\\.|[^:\\]])+)(:\\d+)?\\]/,\n    function([_, word, range], _line, comment, lines, index) {\n      const lineNum = range ? Number.parseInt(range.slice(1), 10) : lines.length;\n      word = word.replace(/\\\\(.)/g, \"$1\");\n      for (let i = index; i < Math.min(index + lineNum, lines.length); i++) {\n        highlightWordInLine.call(this, lines[i], comment, word, classActiveWord);\n      }\n      if (classActivePre)\n        this.addClassToHast(this.pre, classActivePre);\n      return true;\n    },\n    options.matchAlgorithm\n  );\n}\n\nfunction transformerRemoveLineBreak() {\n  return {\n    name: \"@shikijs/transformers:remove-line-break\",\n    code(code) {\n      code.children = code.children.filter((line) => !(line.type === \"text\" && line.value === \"\\n\"));\n    }\n  };\n}\n\nfunction transformerRemoveNotationEscape() {\n  return {\n    name: \"@shikijs/transformers:remove-notation-escape\",\n    postprocess(code) {\n      return code.replace(/\\[\\\\!code/g, \"[!code\");\n    }\n  };\n}\n\nfunction isTab(part) {\n  return part === \"\t\";\n}\nfunction isSpace(part) {\n  return part === \" \" || part === \"\t\";\n}\nfunction separateContinuousSpaces(inputs) {\n  const result = [];\n  let current = \"\";\n  function bump() {\n    if (current.length)\n      result.push(current);\n    current = \"\";\n  }\n  inputs.forEach((part, idx) => {\n    if (isTab(part)) {\n      bump();\n      result.push(part);\n    } else if (isSpace(part) && (isSpace(inputs[idx - 1]) || isSpace(inputs[idx + 1]))) {\n      bump();\n      result.push(part);\n    } else {\n      current += part;\n    }\n  });\n  bump();\n  return result;\n}\nfunction splitSpaces(parts, type, renderContinuousSpaces = true) {\n  if (type === \"all\")\n    return parts;\n  let leftCount = 0;\n  let rightCount = 0;\n  if (type === \"boundary\") {\n    for (let i = 0; i < parts.length; i++) {\n      if (isSpace(parts[i]))\n        leftCount++;\n      else\n        break;\n    }\n  }\n  if (type === \"boundary\" || type === \"trailing\") {\n    for (let i = parts.length - 1; i >= 0; i--) {\n      if (isSpace(parts[i]))\n        rightCount++;\n      else\n        break;\n    }\n  }\n  const middle = parts.slice(leftCount, parts.length - rightCount);\n  return [\n    ...parts.slice(0, leftCount),\n    ...renderContinuousSpaces ? separateContinuousSpaces(middle) : [middle.join(\"\")],\n    ...parts.slice(parts.length - rightCount)\n  ];\n}\n\nfunction transformerRenderWhitespace(options = {}) {\n  const classMap = {\n    \" \": options.classSpace ?? \"space\",\n    \"\t\": options.classTab ?? \"tab\"\n  };\n  const position = options.position ?? \"all\";\n  const keys = Object.keys(classMap);\n  return {\n    name: \"@shikijs/transformers:render-whitespace\",\n    // We use `root` hook here to ensure it runs after all other transformers\n    root(root) {\n      const pre = root.children[0];\n      const code = pre.children[0];\n      code.children.forEach(\n        (line) => {\n          if (line.type !== \"element\")\n            return;\n          const elements = line.children.filter((token) => token.type === \"element\");\n          const last = elements.length - 1;\n          line.children = line.children.flatMap((token) => {\n            if (token.type !== \"element\")\n              return token;\n            const index = elements.indexOf(token);\n            if (position === \"boundary\" && index !== 0 && index !== last)\n              return token;\n            if (position === \"trailing\" && index !== last)\n              return token;\n            const node = token.children[0];\n            if (node.type !== \"text\" || !node.value)\n              return token;\n            const parts = splitSpaces(\n              node.value.split(/([ \\t])/).filter((i) => i.length),\n              position === \"boundary\" && index === last && last !== 0 ? \"trailing\" : position,\n              position !== \"trailing\"\n            );\n            if (parts.length <= 1)\n              return token;\n            return parts.map((part) => {\n              const clone = {\n                ...token,\n                properties: { ...token.properties }\n              };\n              clone.children = [{ type: \"text\", value: part }];\n              if (keys.includes(part)) {\n                this.addClassToHast(clone, classMap[part]);\n                delete clone.properties.style;\n              }\n              return clone;\n            });\n          });\n        }\n      );\n    }\n  };\n}\n\nfunction transformerStyleToClass(options = {}) {\n  const {\n    classPrefix = \"__shiki_\",\n    classSuffix = \"\",\n    classReplacer = (className) => className\n  } = options;\n  const classToStyle = /* @__PURE__ */ new Map();\n  function stringifyStyle(style) {\n    return Object.entries(style).map(([key, value]) => `${key}:${value}`).join(\";\");\n  }\n  function registerStyle(style) {\n    const str = typeof style === \"string\" ? style : stringifyStyle(style);\n    let className = classPrefix + cyrb53(str) + classSuffix;\n    className = classReplacer(className);\n    if (!classToStyle.has(className)) {\n      classToStyle.set(\n        className,\n        typeof style === \"string\" ? style : { ...style }\n      );\n    }\n    return className;\n  }\n  return {\n    name: \"@shikijs/transformers:style-to-class\",\n    pre(t) {\n      if (!t.properties.style)\n        return;\n      const className = registerStyle(t.properties.style);\n      delete t.properties.style;\n      this.addClassToHast(t, className);\n    },\n    tokens(lines) {\n      for (const line of lines) {\n        for (const token of line) {\n          if (!token.htmlStyle)\n            continue;\n          const className = registerStyle(token.htmlStyle);\n          token.htmlStyle = {};\n          token.htmlAttrs ||= {};\n          if (!token.htmlAttrs.class)\n            token.htmlAttrs.class = className;\n          else\n            token.htmlAttrs.class += ` ${className}`;\n        }\n      }\n    },\n    getClassRegistry() {\n      return classToStyle;\n    },\n    getCSS() {\n      let css = \"\";\n      for (const [className, style] of classToStyle.entries()) {\n        css += `.${className}{${typeof style === \"string\" ? style : stringifyStyle(style)}}`;\n      }\n      return css;\n    },\n    clearRegistry() {\n      classToStyle.clear();\n    }\n  };\n}\nfunction cyrb53(str, seed = 0) {\n  let h1 = 3735928559 ^ seed;\n  let h2 = 1103547991 ^ seed;\n  for (let i = 0, ch; i < str.length; i++) {\n    ch = str.charCodeAt(i);\n    h1 = Math.imul(h1 ^ ch, 2654435761);\n    h2 = Math.imul(h2 ^ ch, 1597334677);\n  }\n  h1 = Math.imul(h1 ^ h1 >>> 16, 2246822507);\n  h1 ^= Math.imul(h2 ^ h2 >>> 13, 3266489909);\n  h2 = Math.imul(h2 ^ h2 >>> 16, 2246822507);\n  h2 ^= Math.imul(h1 ^ h1 >>> 13, 3266489909);\n  return (4294967296 * (2097151 & h2) + (h1 >>> 0)).toString(36).slice(0, 6);\n}\n\nexport { createCommentNotationTransformer, findAllSubstringIndexes, parseMetaHighlightString, parseMetaHighlightWords, transformerCompactLineOptions, transformerMetaHighlight, transformerMetaWordHighlight, transformerNotationDiff, transformerNotationErrorLevel, transformerNotationFocus, transformerNotationHighlight, transformerNotationMap, transformerNotationWordHighlight, transformerRemoveLineBreak, transformerRemoveNotationEscape, transformerRenderWhitespace, transformerStyleToClass };\n", "// contentlayer.config.ts\nimport { getHighlighter } from \"@shikijs/compat\";\nimport { defineDocumentType, makeSource } from \"contentlayer2/source-files\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkGfm from \"remark-gfm\";\nimport { visit } from \"unist-util-visit\";\nimport { mdx } from \"./config/app.config\";\n\n/**\n * \u26A1  Single \"MdxPage\" type that matches ANY *.mdx file under /content\n *     No required front-matter \u2192 completely optional metadata.\n */\nexport const MdxPage = defineDocumentType(() => ({\n  name: \"MdxPage\",\n  contentType: \"mdx\",\n  filePathPattern: \"**/*.mdx\", // <\u2500 everything in /content\n  fields: {\n    title: { type: \"string\", required: false },\n    description: { type: \"string\", required: false },\n    published: { type: \"date\", required: false },\n    author: { type: \"string\", required: false },\n    image: { type: \"string\", required: false },\n  },\n  computedFields: {\n    /**\n     * slug \u279C used for the URL (e.g. blog/2025/hello-world)\n     * slugAsParams \u279C same but without the leading folder (e.g. 2025/hello-world)\n     */\n    slug: { type: \"string\", resolve: (doc) => doc._raw.flattenedPath },\n    slugAsParams: {\n      type: \"string\",\n      resolve: (doc) =>\n        doc._raw.flattenedPath\n          .split(\"/\") // ['blog', '2025', 'hello-world']\n          .slice(1) // drop the top-level folder (\"blog\")\n          .join(\"/\"), // '2025/hello-world'\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  documentTypes: [MdxPage],\n  disableImportAliasWarning: true,\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      // Pre-process code blocks to preserve raw string\n      () => (tree) => {\n        visit(tree, (node) => {\n          if (node?.type === \"element\" && node?.tagName === \"pre\") {\n            const [codeEl] = node.children;\n            if (codeEl.tagName !== \"code\") {\n              return;\n            }\n            node.properties[\"__rawstring__\"] = codeEl.children?.[0].value;\n          }\n        });\n      },\n      // Apply syntax highlighting\n      [\n        rehypePrettyCode,\n        {\n          getHighlighter,\n          theme: mdx.codeTheme,\n          keepBackground: mdx.codeHighlighting.keepBackground,\n        },\n      ],\n      // Post-process to handle figure elements\n      () => (tree) => {\n        visit(tree, (node) => {\n          if (node?.type === \"element\" && node?.tagName === \"figure\") {\n            if (!(\"data-rehype-pretty-code-figure\" in node.properties)) {\n              return;\n            }\n            const preElement = node.children.at(-1);\n            if (preElement.tagName !== \"pre\") {\n              return;\n            }\n            preElement.properties[\"__rawstring__\"] =\n              node.properties[\"__rawstring__\"];\n            delete node.properties[\"__rawstring__\"];\n          }\n        });\n      },\n    ],\n  },\n  onSuccess: async (allDocs) => {\n    const docsArray = Array.isArray(allDocs) ? allDocs : [];\n    const blogPosts = docsArray.filter((doc) => doc.slug.startsWith(\"blog/\"));\n    const otherPages = docsArray.filter((doc) => !doc.slug.startsWith(\"blog/\"));\n\n    console.log(\"\uD83D\uDCDA Contentlayer build completed:\", {\n      totalDocuments: docsArray.length,\n      blogPosts: blogPosts.length,\n      otherPages: otherPages.length,\n    });\n  },\n});\n", "export const mdx = {\n  codeTheme: {\n    light: \"github-light\",\n    dark: \"github-dark\",\n  },\n  codeHighlighting: {\n    keepBackground: false,\n  },\n};"],
  "mappings": "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",
  "names": ["normalizeTheme"]
}
